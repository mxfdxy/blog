<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-13T21:39:52+08:00</updated><id>http://localhost:4000/</id><title type="html">Even’s Den</title><subtitle>嗨，我是梁伟（Even），一个 Web 后端开发者，半个 iOS Developer，正在找一份实习工作。这里有我关于技术、书籍以及生活的分享和对自己的美好期望：有梦想，有信仰！</subtitle><entry><title type="html">个人简历</title><link href="http://localhost:4000/about/2017/08/31/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.html" rel="alternate" type="text/html" title="个人简历" /><published>2017-08-31T00:00:00+08:00</published><updated>2017-08-31T00:00:00+08:00</updated><id>http://localhost:4000/about/2017/08/31/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86</id><content type="html" xml:base="http://localhost:4000/about/2017/08/31/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86.html">&lt;h2 id=&quot;梁伟&quot;&gt;梁伟&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;信息：男，汉族，1995年12月，现居北京。&lt;/li&gt;
  &lt;li&gt;手机：13261999011&lt;/li&gt;
  &lt;li&gt;邮箱：mxfdxy@163.com&lt;/li&gt;
  &lt;li&gt;求职意向：PHP 开发工程师&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;职业技能&quot;&gt;职业技能&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;具有扎实的计算机基础，熟练掌握常用的数据结构和算法；&lt;/li&gt;
  &lt;li&gt;熟悉 HTML、CSS、JavaScript、PHP 等 Web 开发语言，熟悉 ThinkPHP 和 Laravel 框架；&lt;/li&gt;
  &lt;li&gt;熟悉 MySQL 数据库管理和优化，有数据库设计和优化经验；&lt;/li&gt;
  &lt;li&gt;熟悉 Linux 基本操作，能够编写简单的 shell 脚本；&lt;/li&gt;
  &lt;li&gt;熟悉 Nginx、Apache 服务器配置，了解 Nginx 性能调优；&lt;/li&gt;
  &lt;li&gt;熟悉 Memcache 和 Redis，对缓存技术有较深的理解；&lt;/li&gt;
  &lt;li&gt;熟练使用 Git 进行代码管理，熟悉 Web 项目开发流程，参与并独立开发过多个项目；&lt;/li&gt;
  &lt;li&gt;了解 Vue、ElementUI 等前端框架，有 iOS 客户端开发经验。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;项目经历&quot;&gt;项目经历&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;云打印（2016.8～2016.9）
    &lt;ul&gt;
      &lt;li&gt;简介：面向大学生的在线文档打印平台，基于 Web 开发，主要包括用户、商家和管理三个模块。&lt;/li&gt;
      &lt;li&gt;职责：在项目中负责用户模块中的文档展示功能、支付功能和订单处理功能。&lt;/li&gt;
      &lt;li&gt;技术：LAMP 架构、ThinkPHP 框架、消息队列。
        &lt;ul&gt;
          &lt;li&gt;借助 OpenOffice、pdf2htmlEX 扩展将 Office 文档转换为 HTML 文件。解决 Office 文档展示不方便的问题。&lt;/li&gt;
          &lt;li&gt;订单处理环节，采用了消息队列的方式，将待处理的订单加入处理队列。通过定时任务和用户请求的方式处理订单。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;地址：http://yundayin.marchsoft.cn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;玩乐（2016.3～2016.6）
    &lt;ul&gt;
      &lt;li&gt;简介：基于 iPad 开发的钢琴学习辅助 APP，主要包括曲库、练习和互动三个模块。&lt;/li&gt;
      &lt;li&gt;职责：在项目中负责练习模块的开发，完成了 MIDI 键盘驱动程序的编写、五线谱与键盘交互的实现。&lt;/li&gt;
      &lt;li&gt;技术：Objective-C、UIKit 框架、CoreMIDI 库。
        &lt;ul&gt;
          &lt;li&gt;在官方文档不详尽又无开发书籍参考的情况下，通过仔细阅读文档和参照 Github 上的 Demo 完成了驱动程序的开发。&lt;/li&gt;
          &lt;li&gt;五线谱页面涉及到基础的钢琴乐理知识，通过自学谱表、音节等乐理知识实现了识谱、听音的功能。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;校园经历&quot;&gt;校园经历&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;加入三月软件工作室（ http://marchsoft.cn ），自学编程，参与开发“玩乐”、“云打印”等多个项目；&lt;/li&gt;
  &lt;li&gt;参加第七届蓝桥杯省级算法竞赛，获得 Java 开发 B 组省赛二等奖；&lt;/li&gt;
  &lt;li&gt;参加过校级、省级的创业大赛，获得 2016 年“挑战杯”大学生创业大赛三等奖；&lt;/li&gt;
  &lt;li&gt;参加并通过英语四级考试。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;教育背景&quot;&gt;教育背景&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;河南科技学院，信息工程学院，计算机科学与技术专业，本科。（2014.09～2018.06）&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;自我评价&quot;&gt;自我评价&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;热爱实践，大学三年利用课余时间及寒暑假参与编程实践，有效代码量超过万行；&lt;/li&gt;
  &lt;li&gt;有良好的编程习惯，致力于写简单优美的代码；&lt;/li&gt;
  &lt;li&gt;有团队意识，负责工作室事务，参与项目开发，有良好的团队沟通和协作能力。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="about" /><category term="简历" /><summary type="html">梁伟</summary></entry><entry><title type="html">QQ快速安全登录的设计与实现</title><link href="http://localhost:4000/tech/2017/08/20/QQ%E5%BF%AB%E9%80%9F%E5%AE%89%E5%85%A8%E7%99%BB%E5%BD%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html" rel="alternate" type="text/html" title="QQ快速安全登录的设计与实现" /><published>2017-08-20T00:00:00+08:00</published><updated>2017-08-20T00:00:00+08:00</updated><id>http://localhost:4000/tech/2017/08/20/QQ%E5%BF%AB%E9%80%9F%E5%AE%89%E5%85%A8%E7%99%BB%E5%BD%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0</id><content type="html" xml:base="http://localhost:4000/tech/2017/08/20/QQ%E5%BF%AB%E9%80%9F%E5%AE%89%E5%85%A8%E7%99%BB%E5%BD%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0.html">&lt;blockquote&gt;
  &lt;p&gt;在使用QQ账号登录腾讯网站时，QQ推荐使用&lt;strong&gt;快速安全登录&lt;/strong&gt;功能来方便快捷安全的登录腾讯网站。快速安全登录除了手机扫描二维码的方式还有另一种方式，即&lt;strong&gt;检测QQ客户端登录账户&lt;/strong&gt;的方式进行登录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;Mac版QQ客户端5.1.0以后，加入了这项新功能（PC版QQ客户端同样加入了此项功能）。新版的QQ支持在浏览器快速安全登录，无需浏览器安装插件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-0e0d3570c287bd75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.0.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的功能怎么样，在电脑上登录QQ客户端，当在浏览器登录腾讯的网站时，网页会提示当前电脑QQ客户端登录的账户，选择一个账户直接登录网页。相较于扫码登录，这种方式及省去了输入账户密码的麻烦同时也避免扫码时对手机的依赖，真正的方便快捷。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-0433297279ed8ca9.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;2.1.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;废话一堆堆，&lt;strong&gt;那么新版本的QQ客户端是怎样实现在浏览器快速登录的？网页如何检测到当前电脑客户端登录的QQ账号？&lt;/strong&gt;第一想法是它可能使用了Cookie，用户在登录QQ客户端时会产生一个网页请求，打开浏览器将登录信息写入Cookie。这样做的代价会很大，因为用户电脑上会存在多个浏览器，而且Cookie信息的作用域跟域名有关，针对不同的域名需要多次写入Cookie。&lt;/p&gt;
&lt;h3 id=&quot;探究&quot;&gt;探究&lt;/h3&gt;
&lt;p&gt;打开浏览器（这里使用的是Chrome）控制台，审查网页元素，重点查看登录界面元素绑定的js事件和url请求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-7560cc8ac3fa78da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;审查元素的过程中，注意到登录子页面用到了&lt;code class=&quot;highlighter-rouge&quot;&gt;iframe&lt;/code&gt;标签。在查看资源文件时找到&lt;code class=&quot;highlighter-rouge&quot;&gt;qc_ptlogin_iframe(xlogin)&lt;/code&gt;文件夹，推测登录相关的资源都放在该目录下。仔细查看目录下每个资源请求的结果，找到一个跟包含账户信息的请求。&lt;/p&gt;

&lt;p&gt;可疑资源请求&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://localhost.ptlogin2.qq.com:4303/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;请求结果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* QQ客户端已登录账号的基本信息 */
var var_sso_uin_list=[{&quot;account&quot;:&quot;1139356156&quot;,&quot;face_index&quot;:-1,&quot;gender&quot;:0,&quot;nickname&quot;:&quot;\&quot; Forヾ&quot;,&quot;uin&quot;:&quot;1139356156&quot;,&quot;client_type&quot;:66818,&quot;uin_flag&quot;:8388608}];ptui_getuins_CB(var_sso_uin_list);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-8685e4a9ef5f3ef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了得到更详细的请求信息，打开Network，发现网页在加载时请求该链接4次，其中3次请求失败。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 请求成功 */
https://localhost.ptlogin2.qq.com:4303/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
/* 请求失败 */
https://localhost.ptlogin2.qq.com:4305/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
/* 请求失败 */
https://localhost.ptlogin2.qq.com:4309/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
/* 请求失败 */
https://localhost.ptlogin2.qq.com:4307/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-51cc9e44bf390a58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这几次请求唯一不同的地方是请求端口号，分别请求了&lt;code class=&quot;highlighter-rouge&quot;&gt;4303&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;4305&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;4307&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;4309&lt;/code&gt;这4个端口。继续查看求请求成功的详情，可以看到HTTP请求的Headers、Response信息。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 常规信息 */
Request URL:https://localhost.ptlogin2.qq.com:4303/pt_get_uins?callback=ptui_getuins_CB&amp;amp;r=0.2243462042902722&amp;amp;pt_local_tk=-1243521203
Request Method:GET
Status Code:200 OK
Remote Address:127.0.0.1:4303
Referrer Policy:no-referrer-when-downgrade

/* 请求头 */
Host:localhost.ptlogin2.qq.com:4303

/* 请求参数 */
callback:ptui_getuins_CB
r:0.2243462042902722
pt_local_tk:-1243521203

/* 响应信息 */
var var_sso_uin_list=[{&quot;account&quot;:&quot;1139356156&quot;,&quot;face_index&quot;:-1,&quot;gender&quot;:0,&quot;nickname&quot;:&quot;\&quot; Forヾ&quot;,&quot;uin&quot;:&quot;1139356156&quot;,&quot;client_type&quot;:66818,&quot;uin_flag&quot;:8388608}];ptui_getuins_CB(var_sso_uin_list);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-240cb0b7411da751.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到&lt;code class=&quot;highlighter-rouge&quot;&gt;Remote Address:127.0.0.1:4303&lt;/code&gt;时，大家心里估计已经明白了。QQ客户端在登录成功后可能会开启一个HTTP服务，监听本机&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;的一个指定端口（如&lt;code class=&quot;highlighter-rouge&quot;&gt;4303&lt;/code&gt;）。当登录多个账号时，会监听多个端口，不同的端口对应的QQ账户。网页端加载时会针对本机指定的几个端口（如&lt;code class=&quot;highlighter-rouge&quot;&gt;4303&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;4305&lt;/code&gt;等）进行请求，获取已登录账号信息。&lt;/p&gt;

&lt;h3 id=&quot;简单验证&quot;&gt;简单验证&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;通过ping命令，确定&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost.ptlogin2.qq.com&lt;/code&gt;域名对应的ip地址是&lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;退出QQ客户端，刷新网页。对&lt;code class=&quot;highlighter-rouge&quot;&gt;localhost.ptlogin2.qq.com&lt;/code&gt;的请求都失败了，QQ在退出时关闭了HTTP服务。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -i tcp:4303&lt;/code&gt;命令查看&lt;code class=&quot;highlighter-rouge&quot;&gt;4303&lt;/code&gt;端口信息，可以看到端口监听程序是确实是QQ客户端。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-e39b1601d5800a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.6.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;如何实现的呢？QQ客户端在登录账号时，会启动本地的HTTP服务并监听特定端口中的一个。腾讯网站在加载时会逐个请求这些特定的端口，请求成功后可以拿到QQ客户端已经登录的账号信息，用户点击账号头像从而完成快速登录。&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="技术" /><summary type="html">在使用QQ账号登录腾讯网站时，QQ推荐使用快速安全登录功能来方便快捷安全的登录腾讯网站。快速安全登录除了手机扫描二维码的方式还有另一种方式，即检测QQ客户端登录账户的方式进行登录。</summary></entry><entry><title type="html">被误解的MVC和被神化的MVVM [转]</title><link href="http://localhost:4000/tech/2015/11/13/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84MVC%E5%92%8C%E8%A2%AB%E7%A5%9E%E5%8C%96%E7%9A%84MVVM.html" rel="alternate" type="text/html" title="被误解的MVC和被神化的MVVM [转]" /><published>2015-11-13T00:00:00+08:00</published><updated>2015-11-13T00:00:00+08:00</updated><id>http://localhost:4000/tech/2015/11/13/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84MVC%E5%92%8C%E8%A2%AB%E7%A5%9E%E5%8C%96%E7%9A%84MVVM</id><content type="html" xml:base="http://localhost:4000/tech/2015/11/13/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84MVC%E5%92%8C%E8%A2%AB%E7%A5%9E%E5%8C%96%E7%9A%84MVVM.html">&lt;blockquote&gt;
  &lt;p&gt;原文链接：&lt;a href=&quot;http://blog.devtang.com/2015/11/02/mvc-and-mvvm/&quot;&gt;http://blog.devtang.com/2015/11/02/mvc-and-mvvm/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;被误解的-mvc&quot;&gt;被误解的 MVC&lt;/h2&gt;
&lt;h3 id=&quot;mvc-的历史&quot;&gt;MVC 的历史&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/view/5432454.htm&quot;&gt;MVC&lt;/a&gt;，全称是 Model View Controller，是模型 (model)－视图 (view)－控制器 (controller) 的缩写。它表示的是一种常见的客户端软件开发框架。&lt;/p&gt;

&lt;p&gt;MVC 的概念最早出现在二十世纪八十年代的 &lt;a href=&quot;http://baike.baidu.com/view/616837.htm&quot;&gt;施乐帕克&lt;/a&gt; 实验室中（对，就是那个发明图形用户界面和鼠标的实验室），当时施乐帕克为 Smalltalk 发明了这种软件设计模式。&lt;/p&gt;

&lt;p&gt;现在，MVC 已经成为主流的客户端编程框架，在 iOS 开发中，系统为我们实现好了公共的视图类：UIView，和控制器类：UIViewController。大多数时候，我们都需要继承这些类来实现我们的程序逻辑，因此，我们几乎逃避不开 MVC 这种设计模式。&lt;/p&gt;

&lt;p&gt;但是，几十年过去了，我们对于 MVC 这种设计模式真的用得好吗？其实不是的，MVC 这种分层方式虽然清楚，但是如果使用不当，很可能让大量代码都集中在 Controller 之中，让 MVC 模式变成了 Massive View Controller 模式。&lt;/p&gt;

&lt;h3 id=&quot;controller-的臃肿问题何解&quot;&gt;Controller 的臃肿问题何解？&lt;/h3&gt;

&lt;p&gt;很多人试图解决 MVC 这种架构下 Controller 比较臃肿的问题。我还记得半年前 InfoQ 搞了一次&lt;a href=&quot;移动座谈会&quot;&gt;移动座谈会&lt;/a&gt;，当时 &lt;a href=&quot;https://github.com/gavinkwoe/BeeFramework&quot;&gt;BeeFramework&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/hackers-painters/samurai-native&quot;&gt;Samurai-Native&lt;/a&gt; 的作者 &lt;a href=&quot;http://weibo.com/gavinkwoe&quot;&gt;老郭&lt;/a&gt; 问了我一句话：「什么样的内容才应该放到 Controller 中？」。但是当时因为时间不够，我没能展开我的观点，这次正好在这里好好谈谈我对于这个问题的想法。&lt;/p&gt;

&lt;p&gt;我们来看看 MVC 这种架构的特点。其实设计模式很多时候是为了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Don't repeat yourself&lt;/code&gt; 原则来做的，该原则要求能够复用的代码要尽量复用，来保证重用。在 MVC 这种设计模式中，我们发现 View 和 Model 都是符合这种原则的。&lt;/p&gt;

&lt;p&gt;对于 View 来说，你如果抽象得好，那么一个 App 的动画效果可以很方便地移植到别的 App 上，而 Github 上也有很多 UI 控件，这些控件都是在 View 层做了很好的封装设计，使得它能够方便地开源给大家复用。&lt;/p&gt;

&lt;p&gt;对于 Model 来说，它其实是用来存储业务的数据的，如果做得好，它也可以方便地复用。比如我当时在做有道云笔记 iPad 版的时候，我们就直接和 iOS 版复用了所有的 Model 层的代码。在创业做猿题库客户端时，iOS 和 iPad 版的 Model 层代码再次被复用上了。当然，因为和业务本身的数据意义相关，Model 层的复用大多数是在一个产品内部，不太可能像 View 层那样开源给社区。&lt;/p&gt;

&lt;p&gt;说完 View 和 Model 了，那我们想想 Controller，Controller 有多少可以复用的？我们写完了一个 Controller 之后，可以很方便地复用它吗？结论是：非常难复用。在某些场景下，我们可能可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;addSubViewController&lt;/code&gt; 之类的方式复用 Controller，但它的复用场景还是非常非常少的。&lt;/p&gt;

&lt;p&gt;如果我们能够意识到 Controller 里面的代码不便于复用，我们就能知道什么代码应该写在 Controller 里面了，那就是那些不能复用的代码。在我看来，Controller 里面就只应该存放这些不能复用的代码，这些代码包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在初始化时，构造相应的 View 和 Model。&lt;/li&gt;
  &lt;li&gt;监听 Model 层的事件，将 Model 层的数据传递到 View 层。&lt;/li&gt;
  &lt;li&gt;监听 View 层的事件，并且将 View 层的事件转发到 Model 层。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果 Controller 只有以上的这些代码，那么它的逻辑将非常简单，而且也会非常短。&lt;/p&gt;

&lt;p&gt;但是，我们却很难做到这一点，因为还是有很多逻辑我们不知道写在哪里，于是就都写到了 Controller 中了，那我们接下来就看看其它逻辑应该写在哪里。&lt;/p&gt;

&lt;h3 id=&quot;如何对-viewcontroller-瘦身&quot;&gt;如何对 ViewController 瘦身？&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.objc.io/&quot;&gt;objc.io&lt;/a&gt; 是一个非常有名的 iOS 开发博客，它上面的第一课 &lt;a href=&quot;https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/&quot;&gt;《Lighter View Controllers》&lt;/a&gt; 上就讲了很多这样的技巧，我们先总结一下它里面的观点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将 UITableView 的 Data Source 分离到另外一个类中。&lt;/li&gt;
  &lt;li&gt;将数据获取和转换的逻辑分别到另外一个类中。&lt;/li&gt;
  &lt;li&gt;将拼装控件的逻辑，分离到另外一个类中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你想明白了吗？其实 MVC 虽然只有三层，但是它并没有限制你只能有三层。所以，我们可以将 Controller 里面过于臃肿的逻辑抽取出来，形成新的可复用模块或架构层次。&lt;/p&gt;

&lt;p&gt;我个人对于逻辑的抽取，有以下总结。&lt;/p&gt;

&lt;h4 id=&quot;将网络请求抽象到单独的类中&quot;&gt;将网络请求抽象到单独的类中&lt;/h4&gt;

&lt;p&gt;新手写代码，直接就在 Controller 里面用 AFNetworking 发一个请求，请求的完数据直接就传递给 View。入门一些的同学，知道把这些请求代码移到另外一个静态类里面。但是我觉得还不够，所以我建议将每一个网络请求直接封装成类。&lt;/p&gt;

&lt;p&gt;把每一个网络请求封装成对象其实是使用了设计模式中的 Command 模式，它有以下好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将网络请求与具体的第三方库依赖隔离，方便以后更换底层的网络库。实际上我们公司的 iOS 客户端最初是基于 &lt;a href=&quot;http://allseeing-i.com/ASIHTTPRequest/&quot;&gt;ASIHttpRequest&lt;/a&gt; 的，我们只花了两天，就很轻松地切换到了 &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;AFNetworking&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;方便在基类中处理公共逻辑，例如猿题库的数据版本号信息就统一在基类中处理。&lt;/li&gt;
  &lt;li&gt;方便在基类中处理缓存逻辑，以及其它一些公共逻辑。&lt;/li&gt;
  &lt;li&gt;方便做对象的持久化。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大家如果感兴趣，可以看我们公司开源的 iOS 网络库：&lt;a href=&quot;https://github.com/yuantiku/YTKNetwork&quot;&gt;YTKNetwork&lt;/a&gt;。它在这种思考的指导下，不但将 Controller 中的代码瘦身，而且进一步演化和加强，现在它还支持诸如复杂网络请求管理，断点续传，插件机制，JSON 合法性检查等功能。&lt;/p&gt;

&lt;p&gt;这部分代码从 Controller 中剥离出来后，不但简化了 Controller 中的逻辑，也达到了网络层的代码复用的效果。&lt;/p&gt;

&lt;h4 id=&quot;将界面的拼装抽象到专门的类中&quot;&gt;将界面的拼装抽象到专门的类中&lt;/h4&gt;

&lt;p&gt;新手写代码，喜欢在 Controller 中把一个个 UILabel ，UIButton，UITextField 往 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt; 上用 &lt;code class=&quot;highlighter-rouge&quot;&gt;addSubView&lt;/code&gt; 方法放。我建议大家可以用两种办法把这些代码从 Controller 中剥离。&lt;/p&gt;

&lt;p&gt;方法一：构造专门的 UIView 的子类，来负责这些控件的拼装。这是最彻底和优雅的方式，不过稍微麻烦一些的是，你需要把这些控件的事件回调先接管，再都一一暴露回 Controller。&lt;/p&gt;

&lt;p&gt;方法二：用一个静态的 Util 类，帮助你做 UIView 的拼装工作。这种方式稍微做得不太彻底，但是比较简单。&lt;/p&gt;

&lt;p&gt;对于一些能复用的 UI 控件，我建议用方法一。如果项目工程比较复杂，我也建议用方法一。如果项目太紧，另外相关项目的代码量也不多，可以尝试方法二。&lt;/p&gt;

&lt;h4 id=&quot;构造-viewmodel&quot;&gt;构造 ViewModel&lt;/h4&gt;

&lt;p&gt;谁说 MVC 就不能用 ViewModel 的？MVVM 的优点我们一样可以借鉴。具体做法就是将 ViewController 给 View 传递数据这个过程，抽象成构造 ViewModel 的过程。&lt;/p&gt;

&lt;p&gt;这样抽象之后，View 只接受 ViewModel，而 Controller 只需要传递 ViewModel 这么一行代码。而另外构造 ViewModel 的过程，我们就可以移动到另外的类中了。&lt;/p&gt;

&lt;p&gt;在具体实践中，我建议大家专门创建构造 ViewModel 工厂类，参见 &lt;a href=&quot;http://baike.baidu.com/view/1306799.htm&quot;&gt;工厂模式&lt;/a&gt;。另外，也可以专门将数据存取都抽将到一个 Service 层，由这层来提供 ViewModel 的获取。&lt;/p&gt;

&lt;h4 id=&quot;专门构造存储类&quot;&gt;专门构造存储类&lt;/h4&gt;

&lt;p&gt;刚刚说到 ViewModel 的构造可以抽奖到一个 Service 层。与此相应的，数据的存储也应该由专门的对象来做。在小猿搜题项目中，我们由一个叫 UserAgent 的类，专门来处理本地数据的存取。&lt;/p&gt;

&lt;p&gt;数据存取放在专门的类中，就可以针对存取做额外的事情了。比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对一些热点数据增加缓存&lt;/li&gt;
  &lt;li&gt;处理数据迁移相关的逻辑&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果要做得更细，可以把存储引擎再抽象出一层。这样你就可以方便地切换存储的底层，例如从 sqlite 切换到 key-value 的存储引擎等。&lt;/p&gt;

&lt;h4 id=&quot;小结&quot;&gt;小结&lt;/h4&gt;

&lt;p&gt;通过代码的抽取，我们可以将原本的 MVC 设计模式中的 ViewController 进一步拆分，构造出 网络请求层、ViewModel 层、Service 层、Storage 层等其它类，来配合 Controller 工作，从而使 Controller 更加简单，我们的 App 更容易维护。&lt;/p&gt;

&lt;p&gt;另外，不知道大家注意到没，其实 Controller 层是非常难于测试的，如果我们能够将 Controller 瘦身，就可以更方便地写 Unit Test 来测试各种与界面的无关的逻辑。移动端自动化测试框架都不太成熟，但是将 Controller 的代码抽取出来，是有助于我们做测试工作的。&lt;/p&gt;

&lt;p&gt;希望本文能帮助大家掌握正确使用 MVC 的姿势，在下一节里，我将分享一下我对 MVVM 的看法。&lt;/p&gt;

&lt;h2 id=&quot;被神化的-mvvm&quot;&gt;被神化的 MVVM&lt;/h2&gt;

&lt;h3 id=&quot;mvvm-的历史&quot;&gt;MVVM 的历史&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;MVVM&lt;/a&gt; 是 Model-View-ViewModel 的简写。&lt;/p&gt;

&lt;p&gt;相对于 MVC 的历史来说，MVVM 是一个相当新的架构，MVVM 最早于 2005 年被微软的 WPF 和 Silverlight 的架构师 John Gossman 提出，并且应用在微软的软件开发中。当时 MVC 已经被提出了 20 多年了，可见两者出现的年代差别有多大。&lt;/p&gt;

&lt;p&gt;MVVM 在使用当中，通常还会利用双向绑定技术，使得 Model 变化时，ViewModel 会自动更新，而 ViewModel 变化时，View 也会自动变化。所以，MVVM 模式有些时候又被称作：&lt;a href=&quot;https://en.wikipedia.org/wiki/Model_View_ViewModel&quot;&gt;model-view-binder&lt;/a&gt; 模式。&lt;/p&gt;

&lt;p&gt;具体在 iOS 中，可以使用 KVO 或 Notification 技术达到这种效果。&lt;/p&gt;

&lt;h3 id=&quot;mvvm-的神化&quot;&gt;MVVM 的神化&lt;/h3&gt;

&lt;p&gt;在使用中，我发现大家对于 MVVM 以及 MVVM 衍生出来的框架（比如 &lt;a href=&quot;https://github.com/ReactiveCocoa/ReactiveCocoa&quot;&gt;ReactiveCocoa&lt;/a&gt;）有一种「敬畏」感。这种「敬畏」感某种程度上就像对神一样，这主要表现在我没有听到大家对于 MVVM 的任何批评。&lt;/p&gt;

&lt;p&gt;我感觉原因首先是 MVVM 并没有很大程度上普及，大家对于新技术一般都不熟，进而不敢妄加评论。另外，ReactiveCocoa 本身上手的复杂性，也让很多人感觉到这种技术很高深难懂，进而加重了大家对它的「敬畏」。&lt;/p&gt;

&lt;h3 id=&quot;mvvm-的作用和问题&quot;&gt;MVVM 的作用和问题&lt;/h3&gt;

&lt;p&gt;MVVM 在实际使用中，确实能够使得 Model 层和 View 层解耦，但是如果你需要实现 MVVM 中的双向绑定的话，那么通常就需要引入更多复杂的框架来实现了。&lt;/p&gt;

&lt;p&gt;对此，MVVM 的作者 John Gossman 的 &lt;a href=&quot;http://blogs.msdn.com/b/johngossman/archive/2006/03/04/543695.aspx&quot;&gt;批评&lt;/a&gt; 应该是最为中肯的。John Gossman 对 MVVM 的批评主要有两点：&lt;/p&gt;

&lt;p&gt;第一点：数据绑定使得 Bug 很难被调试。你看到界面异常了，有可能是你 View 的代码有 Bug，也可能是 Model 的代码有问题。数据绑定使得一个位置的 Bug 被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。&lt;/p&gt;

&lt;p&gt;第二点：对于过大的项目，数据绑定需要花费更多的内存。&lt;/p&gt;

&lt;p&gt;某种意义上来说，我认为就是数据绑定使得 MVVM 变得复杂和难用了。但是，这个缺点同时也被很多人认为是优点。&lt;/p&gt;

&lt;h3 id=&quot;reactivecocoa&quot;&gt;ReactiveCocoa&lt;/h3&gt;

&lt;p&gt;函数式编程（Functional Programming）和响应式编程（React Programming）也是当前很火的两个概念，它们的结合可以很方便地实现数据的绑定。于是，在 iOS 编程中，ReactiveCocoa 横空出世了，它的概念都非常 新，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;函数式编程（Functional Programming），函数也变成一等公民了，可以拥有和对象同样的功能，例如当成参数传递，当作返回值等。看看 Swift 语言带来的众多函数式编程的特性，就你知道这多 Cool 了。&lt;/li&gt;
  &lt;li&gt;响应式编程（React Programming），原来我们基于事件（Event）的处理方式都弱了，现在是基于输入（在 ReactiveCocoa 里叫 Signal）的处理方式。输入还可以通过函数式编程进行各种 Combine 或 Filter，尽显各种灵活的处理。&lt;/li&gt;
  &lt;li&gt;无状态（Stateless），状态是函数的魔鬼，无状态使得函数能更好地测试。&lt;/li&gt;
  &lt;li&gt;不可修改（Immutable），数据都是不可修改的，使得软件逻辑简单，也可以更好地测试。
哇，所有这些都太 Cool 了。当我看到的时候，我都鸡冻了！&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;我们应该客观评价-mvvm-和-reactivecocoa&quot;&gt;我们应该客观评价 MVVM 和 ReactiveCocoa&lt;/h3&gt;

&lt;p&gt;但是但是，我突然想到，我好象只需要一个 ViewModel 而已，我完全可以简单地做一个 ViewModel 的工厂类或 Service 类就可以了，为什么要引入这么多框架？现有的 MVC 真的有那么大的问题吗？&lt;/p&gt;

&lt;p&gt;直到现在，ReactiveCocoa 在国内外还都是在小众领域，没有被大量接受成为主流的编程框架。不只是在 iOS 语言，在别的语言中，例如 Java 中的 RxJava 也同样没有成为主流。&lt;/p&gt;

&lt;p&gt;我在这里，不是想说 ReactiveCocoa 不好，也不是想说 MVVM 不好，而是想让大家都能够有一个客观的认识。ReactiveCocoa 和 MVVM 不应该被神化，它是一种新颖的编程框架，能够解决旧有编程框架的一些问题，但是也会带来一些新问题，仅此而已。如果不能使好的驾驭 ReactiveCocoa，同样会造成 Controller 代码过于复杂，代码逻辑不易维护的问题。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;有一些人总是追赶着技术，有什么新技术不管三七二十一立马就用，结果被各种坑。&lt;/p&gt;

&lt;p&gt;又有一些人，总是担心新技术带来的技术风险，不愿意学习。结果现在还有人在用 MRC 手动管理引用计数。&lt;/p&gt;

&lt;p&gt;而我想说，我们需要保持的是一个拥抱变化的心，以及理性分析的态度。在新技术的面前，不盲从，也不守旧，一切的决策都应该建立在认真分析的基础上，这样才能应对技术的变化。&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="iOS" /><summary type="html">原文链接：http://blog.devtang.com/2015/11/02/mvc-and-mvvm/</summary></entry><entry><title type="html">异步编程和多线程之间有什么区别？[译]</title><link href="http://localhost:4000/tech/2015/08/06/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html" rel="alternate" type="text/html" title="异步编程和多线程之间有什么区别？[译]" /><published>2015-08-06T00:00:00+08:00</published><updated>2015-08-06T00:00:00+08:00</updated><id>http://localhost:4000/tech/2015/08/06/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3F</id><content type="html" xml:base="http://localhost:4000/tech/2015/08/06/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html">&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;异步编程和多线程之间有什么区别？&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;描述&quot;&gt;描述&lt;/h3&gt;

&lt;p&gt;我认为它们基本上是一样的。&lt;/p&gt;

&lt;p&gt;为处理器编写分配任务的程序(在拥有2个以上处理器的机器上)。然后我看了https://msdn.microsoft.com/en-us/library/hh191443.aspx 它说&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;方法的目的是实现非阻塞操作。当等待的任务正在运行时，&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;方法中的&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;表达式不会阻塞当前线程。相反，表达式会将方法剩余部分注册为为一个后续事件，并将控制权返回给&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;方法的调用者。
&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;关键字不会导致额外的线程被创建。&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;方法不需要多线程，因为异步方法不会在它自己的线程上运行。该方法在当前同步的上下文上运行，只有在该方法处于活动状态时才使用时间。你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Task.Run&lt;/code&gt;将 CPU 密集型的工作转移到后台线程，但是后台线程对正在等待可用结果的进程没有帮助。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想知道是谁能把它翻译成英文。它似乎描述了异步性和线程的区分，意思是你所创建的程序具有异步任务但并没有多线程。&lt;/p&gt;

&lt;p&gt;现在，我理解了异步任务的概念，比如 Jon Skeet 的 《C# In Depth, Third Edition》467页的例子。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;async void DisplayWebsiteLength ( object sender, EventArgs e )
{
     label.Text = &quot;Fetching ...&quot;;
    using ( HttpClient client = new HttpClient() )
    {
        Task&amp;lt;string&amp;gt; task = client.GetStringAsync(&quot;http://csharpindepth.com&quot;);
        string text = await task;
        label.Text = text.Length.ToString();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;关键字的意思是“这个函数，无论何时被调用，它都不会在上下文中被调用，因为它完成所需要求的东西只有在它调用后才会被调用”。&lt;/p&gt;

&lt;p&gt;换句话说，把它写在某个任务的中间&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int x = 5; 
DisplayWebsiteLength();
double y = Math.Pow((double)x,2000.0);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;，由于&lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayWebsiteLength()&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;没有任何关系，因此会导致&lt;code class=&quot;highlighter-rouge&quot;&gt;Displaywebtelength()&lt;/code&gt;在后台执行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;         processor 1                |      processor 2
-------------------------------------------------------------------
int x = 5;                                 |  DisplayWebsiteLength()
double y = Math.Pow((double)x,2000.0);     |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;很明显，这是一个愚蠢的例子，但我是正确呢？还是完全糊涂了？还是其他呢？&lt;/p&gt;

&lt;p&gt;(同样，我也搞不清楚为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;在上面的函数中没有使用过。)&lt;/p&gt;

&lt;h3 id=&quot;回答&quot;&gt;回答&lt;/h3&gt;

&lt;p&gt;你的这种误解很普遍，很多人认为多线程和异步是一回事，事实并非如此。&lt;/p&gt;

&lt;p&gt;举个例子帮助理解，你在餐厅做饭，来了一个订单要一份鸡蛋和烤面包。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;同步：你要先炒鸡蛋，然后再烤面包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步，单线程：你把鸡蛋放在锅里炒，设置一个定时器。又把面包放在面包机里，再设置一个定时器。制作过程中，你把厨房打扫了一遍。定时结束的时候，你把鸡蛋从锅里盛出来，从面包机里取出烤好的面包，最后上桌。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异步，多线程：你雇用了至少两个厨师，一个炒鸡蛋，一个烤面包。你需要做的是协调这些厨师做饭，避免他们共用厨房资源时产生冲突，当然你还得付钱给他们。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你是不是认为多线程只是异步作业的一种方式？&lt;strong&gt;线程是跟工人有关的，异步是跟任务有关的。&lt;/strong&gt;在多线程工作流程里，你分配任务给工人；在异步单线程工作流成中，你需要一个任务表，上面记录着这些任务所依赖的其他任务结果。当每个任务完成时，它会根据任务的结果来调度下一个可以运行的任务代码。但是你希望只需要一个工人来完成所有的任务，而不是为每一个任务分配一个工人。&lt;/p&gt;

&lt;p&gt;它能帮助你认识到很多任务不是处理器密集型的（processor-bound）。对于处理器密集型的任务，尽可能多的雇佣工人（线程）是有意义的，因为有处理器，为每个工人分配一个任务，并为每个工人分配一个处理器，允许处理器处理其他工作但要尽可能快的计算出结果。而对于不需要处理器的任务，你根本不需要分配一个工人。你只需要等待消息的到达，消息的结果是可用的，并在等待的时候可以做一些其他事情。当消息到达后，你可以将任务完成的后序事情安排为 to-do list 的下一个任务。&lt;/p&gt;

&lt;p&gt;因此，详细的看看 Jon 的例子，发生什么了？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;谁调用了 DisplayWebSiteLength？我们并不关心。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它设置了一个标签，创建了一个客户端，并要求客户端获取一些东西。客户端返回一个对象代表获取东西的任务。这项任务正在执行中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;它会不会在其他线程中执行？可能不会，请阅读 Stephen 的文章中关于为什么没有线程的链接。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在我们等待任务，发生了什么？我们查看这项任务在创建和等待期间是否完成。如果是的话，那么我们得到结果并继续运行。我们假设它没有完成。&lt;strong&gt;我们将该方法的剩余部分注册成该任务的后续事件，再返回。&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在控制已经返回给调用者。它会做什么？做任何它想要的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在假设任务完成了。它是怎么做到的呢？也许它运行在另一个线程上，或者是返回的调用者允许它在当前线程上运行来完成任务。无论如何，我们现在已经完成了一项任务。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;完成的任务会要求当前的的线程–可能是唯一的线程–来运行该任务的后续事情。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;控制立即返回到我们在等待时离开的那个方法，现在有了一个可用的结果，因此我们可以分配&lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;并运行其余的方法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就像我类比的这样。有人向你要一份文件，你通过邮件把文件发送了过去，然后继续做其他的工作。当你看到邮件到达邮箱的信号时，你高兴的完成剩下的工作–打开邮封、支付运费等等。你不需要雇佣另一个工人来为你做这些事。&lt;/p&gt;

&lt;h3 id=&quot;原文&quot;&gt;原文&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34680985/what-is-the-difference-between-asynchronous-programming-and-multithreading?answertab=active#tab-top&quot;&gt;What is the difference between asynchronous programming and multithreading?&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="tech" /><category term="编程" /><summary type="html">问题</summary></entry><entry><title type="html">NavigationBar与Navigation Item的区别</title><link href="http://localhost:4000/tech/2015/06/05/Navigation-Bar-%E4%B8%8E-Navigation-Item-%E7%9A%84%E5%8C%BA%E5%88%AB.html" rel="alternate" type="text/html" title="NavigationBar与Navigation Item的区别" /><published>2015-06-05T00:00:00+08:00</published><updated>2015-06-05T00:00:00+08:00</updated><id>http://localhost:4000/tech/2015/06/05/Navigation-Bar-%E4%B8%8E-Navigation-Item-%E7%9A%84%E5%8C%BA%E5%88%AB</id><content type="html" xml:base="http://localhost:4000/tech/2015/06/05/Navigation-Bar-%E4%B8%8E-Navigation-Item-%E7%9A%84%E5%8C%BA%E5%88%AB.html">&lt;blockquote&gt;
  &lt;p&gt;刚接触 iOS 开发的同学估计不清楚 Navigation Bar 和 Navigation Item 区别，我在这里简单介绍一下两者的区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-225bf2491e8f6578.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-6e688c6d08c06888.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-d6992811be255d6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;3.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-645dcec0c866dfae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/439444-2606a108e1406299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;5.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Navigation Bar 是 Navigation Controller（容器） 的属性，容器中的多个 View Controller 会共用这一属性；&lt;/li&gt;
  &lt;li&gt;Navigation Bar 的作用是放置 Navigation Item；&lt;/li&gt;
  &lt;li&gt;Navigation Item 是 View Controller 的独有属性，容器中多个 ViewController 之间不会共用这一属性；&lt;/li&gt;
  &lt;li&gt;Navigation Item 的作用是放置 leftBarButtonItem、rightBarButtonItem、title 和 prompt 等。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tech" /><category term="iOS" /><summary type="html">刚接触 iOS 开发的同学估计不清楚 Navigation Bar 和 Navigation Item 区别，我在这里简单介绍一下两者的区别。</summary></entry></feed>